{"ast":null,"code":"import _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react'; //Set the Game Status\n\nexport const useGameStatus = rowsCleared => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        score = _useState2[0],\n        setScore = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rows = _useState4[0],\n        setRows = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        level = _useState6[0],\n        setLevel = _useState6[1]; //Scores\n\n\n  const linePoints = [40, 100, 300, 1200];\n  const calcScore = useCallback(() => {\n    // If we clear a row (not 0) so we have a Score\n    if (rowsCleared > 0) {\n      //This is how original Tetris score is calculated\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1)); //Keep track of Rows Cleared\n\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setRows, level, setLevel];\n};","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD,C,CAGA;;AACA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAAA,oBAEhBJ,QAAQ,CAAC,CAAD,CAFQ;AAAA;AAAA,QAEnCK,KAFmC;AAAA,QAE5BC,QAF4B;;AAAA,qBAGlBN,QAAQ,CAAC,CAAD,CAHU;AAAA;AAAA,QAGnCO,IAHmC;AAAA,QAG7BC,OAH6B;;AAAA,qBAIhBR,QAAQ,CAAC,CAAD,CAJQ;AAAA;AAAA,QAInCS,KAJmC;AAAA,QAI5BC,QAJ4B,kBAM1C;;;AACA,QAAMC,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;AAEA,QAAMC,SAAS,GAAGV,WAAW,CAAC,MAAM;AAElC;AACA,QAAGE,WAAW,GAAG,CAAjB,EAAmB;AAEjB;AACAE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAhB,CAAR,CAHiB,CAKjB;;AACAD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AACD;AACF,GAX4B,EAW1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAX0B,CAA7B;AAaAH,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AAED,CA5BM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n\n//Set the Game Status\nexport const useGameStatus = rowsCleared => {\n\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  //Scores\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n\n    // If we clear a row (not 0) so we have a Score\n    if(rowsCleared > 0){\n\n      //This is how original Tetris score is calculated\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n\n      //Keep track of Rows Cleared\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n\n};\n"]},"metadata":{},"sourceType":"module"}