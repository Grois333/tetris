{"ast":null,"code":"import _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/isaac/Documents/Developers Institute/Exercises/tetris/src/components/Tetris.js\";\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers';\nimport Particles from 'react-particles-js';\nimport Logo from './Logo/Logo';\nimport Instructions from './Instructions/Instructions';\nimport Navigation from './Navigation/Navigation';\nimport Signin from './Signin/Signin';\nimport Info from './Info/Info'; //Import Styled Componenst\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; //Custom Hooks\n\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus'; // Game components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = ({\n  user\n}) => {\n  //Speed of the drop in the game depending the Level\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1]; //When the game is Over\n\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3]; //Send the player to the stage\n\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 3),\n        stage = _useStage2[0],\n        setStage = _useStage2[1],\n        rowsCleared = _useStage2[2];\n\n  const _useGameStatus = useGameStatus(rowsCleared),\n        _useGameStatus2 = _slicedToArray(_useGameStatus, 6),\n        score = _useGameStatus2[0],\n        setScore = _useGameStatus2[1],\n        rows = _useGameStatus2[2],\n        setRows = _useGameStatus2[3],\n        level = _useGameStatus2[4],\n        setLevel = _useGameStatus2[5]; // const [name] = Info();\n  // console.log(createStage());\n\n\n  console.log('re-render'); //Player movement, left and right\n\n  const movePlayer = dir => {\n    //If it not collided with nothing on the sides, do the move! otherwise dont do anything\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      //Update player position\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; //Starting the Game\n\n\n  const startGame = () => {\n    //Reset everything\n    setStage(createStage());\n    setDropTime(1000); //The Tetromino will drop 1s automatic\n\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  }; //Droping down the player\n\n\n  const drop = () => {\n    //Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1); //Increase the speed of the drop in the game\n\n      setDropTime(1000 / (level + 1) + 200);\n    } //Check if not collided on drop down\n\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      //Update player position\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      //Game over\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER!!!\");\n\n        if (score > user.entries) {\n          user.entries = score;\n        }\n\n        setGameOver(true);\n        setDropTime(null);\n        console.log(user);\n        onGameOver(user);\n      } //else if it collided on drop, set the property to true (merge the player to the stage)\n\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  }; //Send To Server\n\n\n  onGameOver = user => {\n    fetch('http://localhost:3000/high-score', {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(response => response.json()).then(user => {\n      if (user.id) {\n        this.props.loadUser(user);\n      }\n    });\n  }; //When player releases the key down pressed, set Interval drop again\n\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        console.log('Interval On!');\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n  }; //Function to go down the player (when we press the down key)\n\n\n  const dropPlayer = () => {\n    console.log('Interval Off!'); // Stop the Interval drop when pressed down\n\n    setDropTime(null);\n    drop();\n  }; //Callback function when we press the keys in the keyboard\n\n\n  const move = ({\n    keyCode\n  }) => {\n    //Check that the game is not Over\n    if (!gameOver) {\n      if (keyCode === 37) {\n        //left key arrow on the keyboard\n        movePlayer(-1); //moving to the left\n      } else if (keyCode === 39) {\n        //right key arrow on the keyboard\n        movePlayer(1); //moving to the right\n      } else if (keyCode === 40) {\n        //down key arrow on the keyboard\n        dropPlayer(); //go down\n      } else if (keyCode === 38) {\n        //up key arrow on the keyboard\n        playerRotate(stage, 1); // call rotate function to rotate tetromino\n      }\n    }\n  }; //We use Interval function for the drop time of the Tetromino\n\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return (//Wrap with our background Image, Callback function when a key is press on the screen\n    //If the game is over Display gameOver\n    //call the startGame function on click start button\n    // <Particles className='particles' params={particlesOptions}>\n    React.createElement(StyledTetrisWrapper, {\n      role: \"button\",\n      tabIndex: \"0\",\n      onKeyDown: e => move(e),\n      onKeyUp: keyUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(StyledTetris, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(Instructions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(Stage, {\n      stage: stage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, gameOver ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(Info, {\n      name: user.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), \" />\", React.createElement(Display, {\n      gameOver: gameOver,\n      text: \"Game Over\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"High Score: \".concat(user.entries),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Score: \".concat(score),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Rows: \".concat(rows),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Level: \".concat(level),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Info, {\n      name: user.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"High Score: \".concat(user.entries),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Score: \".concat(score),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Rows: \".concat(rows),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Level: \".concat(level),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })), React.createElement(StartButton, {\n      callback: startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })))) // </Particles>\n\n  );\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Particles","Logo","Instructions","Navigation","Signin","Info","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","useGameStatus","Stage","Display","StartButton","Tetris","user","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","console","log","movePlayer","dir","x","y","startGame","drop","prev","collided","pos","entries","onGameOver","fetch","method","headers","body","JSON","stringify","then","response","json","id","props","loadUser","keyUp","keyCode","dropPlayer","move","e","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\nimport Particles from 'react-particles-js';\n\nimport Logo from './Logo/Logo';\n\nimport Instructions from './Instructions/Instructions';\n\nimport Navigation from './Navigation/Navigation';\n\nimport Signin from './Signin/Signin';\n\nimport Info from './Info/Info';\n\n\n//Import Styled Componenst\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n//Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Game components\nimport Stage from './Stage';\n\nimport Display from './Display';\n\nimport StartButton from './StartButton';\n\n\nconst Tetris = ({user}) => {\n\n  //Speed of the drop in the game depending the Level\n  const [dropTime, setDropTime] = useState(null);\n\n  //When the game is Over\n  const [gameOver, setGameOver] = useState(false);\n\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n\n  //Send the player to the stage\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n  // const [name] = Info();\n\n  // console.log(createStage());\n\n  console.log('re-render');\n\n  //Player movement, left and right\n  const movePlayer = dir => {\n\n    //If it not collided with nothing on the sides, do the move! otherwise dont do anything\n    if(!checkCollision(player, stage, { x: dir, y: 0 })){\n\n      //Update player position\n      updatePlayerPos({ x: dir, y: 0 });\n\n    }\n\n  }\n\n  //Starting the Game\n  const startGame = () => {\n\n    //Reset everything\n    setStage(createStage());\n    setDropTime(1000);  //The Tetromino will drop 1s automatic\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n\n  };\n\n  //Droping down the player\n  const drop = () => {\n\n    //Increase level when player has cleared 10 rows\n    if(rows > (level + 1) * 10){\n      setLevel(prev => prev + 1);\n\n      //Increase the speed of the drop in the game\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    //Check if not collided on drop down\n    if(!checkCollision(player, stage, { x: 0, y: 1})){\n\n      //Update player position\n      updatePlayerPos({ x: 0, y: 1, collided: false});\n\n    } else {\n\n      //Game over\n      if(player.pos.y < 1){\n        console.log(\"GAME OVER!!!\");\n\n        if(score > user.entries){\n          user.entries = score;\n        }\n\n\n        setGameOver(true);\n        setDropTime(null);\n\n\n\n        console.log(user);\n\n\n        onGameOver(user);\n\n\n\n      }\n\n      //else if it collided on drop, set the property to true (merge the player to the stage)\n      updatePlayerPos({ x: 0, y: 0, collided: true});\n\n    }\n\n  }\n\n\n  //Send To Server\n   onGameOver = (user) => {\n     fetch('http://localhost:3000/high-score', {\n       method: 'put',\n       headers: {'Content-Type': 'application/json'},\n       body: JSON.stringify(user)\n     }).then(response => response.json())\n       .then(user => {\n         if(user.id){\n           this.props.loadUser(user);\n         }\n       })\n   }\n\n\n\n\n  //When player releases the key down pressed, set Interval drop again\n  const keyUp = ({ keyCode }) => {\n\n    if(!gameOver){\n      if(keyCode === 40){\n        console.log('Interval On!');\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n\n  }\n\n\n  //Function to go down the player (when we press the down key)\n  const dropPlayer = () => {\n\n    console.log('Interval Off!');\n\n    // Stop the Interval drop when pressed down\n    setDropTime(null);\n\n    drop();\n  }\n\n\n  //Callback function when we press the keys in the keyboard\n  const move = ({ keyCode }) => {\n\n    //Check that the game is not Over\n    if(!gameOver){\n      if(keyCode === 37){ //left key arrow on the keyboard\n        movePlayer(-1); //moving to the left\n      } else if (keyCode === 39 ){ //right key arrow on the keyboard\n        movePlayer(1); //moving to the right\n      } else if (keyCode === 40){ //down key arrow on the keyboard\n        dropPlayer(); //go down\n      } else if (keyCode === 38){ //up key arrow on the keyboard\n        playerRotate(stage, 1); // call rotate function to rotate tetromino\n      }\n    }\n  }\n\n\n //We use Interval function for the drop time of the Tetromino\n  useInterval(() => {\n\n    drop();\n\n  }, dropTime)\n\n\n\n\n\n  return(\n    //Wrap with our background Image, Callback function when a key is press on the screen\n    //If the game is over Display gameOver\n    //call the startGame function on click start button\n\n     // <Particles className='particles' params={particlesOptions}>\n\n\n\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n\n\n\n\n\n      <StyledTetris>\n\n       <Logo />\n\n     <Instructions />\n\n      <Stage stage={stage} />\n\n\n      <aside>\n\n\n        {gameOver ? (\n\n          <div>\n            <Info name={user.name} /> />\n           <Display gameOver={gameOver} text=\"Game Over\" />\n            <Display text={`High Score: ${user.entries}`} />\n           <Display text={`Score: ${score}`} />\n           <Display text={`Rows: ${rows}`} />\n           <Display text={`Level: ${level}`} />\n          </div>\n\n        ) : (\n\n        <div>\n          <Info name={user.name} />\n          <Display text={`High Score: ${user.entries}`} />\n         <Display text={`Score: ${score}`} />\n         <Display text={`Rows: ${rows}`} />\n         <Display text={`Level: ${level}`} />\n        </div>\n\n       )}\n\n\n\n        <StartButton callback={startGame}/>\n\n      </aside>\n\n      </StyledTetris>\n\n\n    </StyledTetrisWrapper>\n\n   // </Particles>\n\n  )\n}\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}