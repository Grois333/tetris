{"ast":null,"code":"import _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/isaac/Documents/Developers Institute/Exercises/tetris/src/components/Tetris.js\";\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers'; //Import Styled Componenst\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; //Custom Hooks\n\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage'; // components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  //Speed of the drop in the game depending the Level\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1]; //When the game is Over\n\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3]; //Send the player to the stage\n\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 2),\n        stage = _useStage2[0],\n        setStage = _useStage2[1]; // console.log(createStage());\n\n\n  console.log('re-render'); //Player movement, left and right\n\n  const movePlayer = dir => {\n    //If it not collided with nothing on the sides, do the move! otherwise dont do anything\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      //Update player position\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; //Starting the Game\n\n\n  const startGame = () => {\n    //Reset everything\n    setStage(createStage());\n    setDropTime(1000); //The Tetromino will drop 1s automatic\n\n    resetPlayer();\n    setGameOver(false);\n  }; //Droping down the player\n\n\n  const drop = () => {\n    //Check if not collided on drop down\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      //Update player position\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      //Game over\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER!!!\");\n        setGameOver(true);\n        setDropTime(null);\n      } //else if it collided on drop, set the property to true (merge the player to the stage)\n\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  }; //When player releases the key down pressed, set Interval drop again\n\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        console.log('Interval On!');\n        setDropTime(1000);\n      }\n    }\n  }; //Function to go down the player (when we press the down key)\n\n\n  const dropPlayer = () => {\n    console.log('Interval Off!'); // Stop the Interval drop when pressed down\n\n    setDropTime(null);\n    drop();\n  }; //Callback function when we press the keys in the keyboard\n\n\n  const move = ({\n    keyCode\n  }) => {\n    //Check that the game is not Over\n    if (!gameOver) {\n      if (keyCode === 37) {\n        //left key arrow on the keyboard\n        movePlayer(-1); //moving to the left\n      } else if (keyCode === 39) {\n        //right key arrow on the keyboard\n        movePlayer(1); //moving to the right\n      } else if (keyCode === 40) {\n        //down key arrow on the keyboard\n        dropPlayer(); //go down\n      } else if (keyCode === 38) {\n        //up key arrow on the keyboard\n        playerRotate(stage, 1); // call rotate function to rotate tetromino\n      }\n    }\n  }; //We use Interval function for the drop time of the Tetromino\n\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return (//Wrap with our background Image, Callback function when a key is press on the screen\n    //If the game is over Display gameOver\n    //call the startGame function on click start button\n    React.createElement(StyledTetrisWrapper, {\n      role: \"button\",\n      tabIndex: \"0\",\n      onKeyDown: e => move(e),\n      onKeyUp: keyUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(StyledTetris, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      stage: stage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, gameOver ? React.createElement(Display, {\n      gameOver: gameOver,\n      text: \"Game Over\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Display, {\n      text: \"Score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Rows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Display, {\n      text: \"Level\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })), React.createElement(StartButton, {\n      callback: startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }))))\n  );\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","Stage","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","console","log","movePlayer","dir","x","y","startGame","drop","collided","pos","keyUp","keyCode","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n\n//Import Styled Componenst\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n//Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\n\n// components\nimport Stage from './Stage';\n\nimport Display from './Display';\n\nimport StartButton from './StartButton';\n\n\nconst Tetris = () => {\n\n  //Speed of the drop in the game depending the Level\n  const [dropTime, setDropTime] = useState(null);\n\n  //When the game is Over\n  const [gameOver, setGameOver] = useState(false);\n\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n\n  //Send the player to the stage\n  const [stage, setStage] = useStage(player, resetPlayer);\n\n  // console.log(createStage());\n\n  console.log('re-render');\n\n  //Player movement, left and right\n  const movePlayer = dir => {\n\n    //If it not collided with nothing on the sides, do the move! otherwise dont do anything\n    if(!checkCollision(player, stage, { x: dir, y: 0 })){\n\n      //Update player position\n      updatePlayerPos({ x: dir, y: 0 });\n\n    }\n\n  }\n\n  //Starting the Game\n  const startGame = () => {\n\n    //Reset everything\n    setStage(createStage());\n    setDropTime(1000);  //The Tetromino will drop 1s automatic\n    resetPlayer();\n    setGameOver(false);\n\n  }\n\n  //Droping down the player\n  const drop = () => {\n\n    //Check if not collided on drop down\n    if(!checkCollision(player, stage, { x: 0, y: 1})){\n\n      //Update player position\n      updatePlayerPos({ x: 0, y: 1, collided: false});\n\n    } else {\n\n      //Game over\n      if(player.pos.y < 1){\n        console.log(\"GAME OVER!!!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      //else if it collided on drop, set the property to true (merge the player to the stage)\n      updatePlayerPos({ x: 0, y: 0, collided: true});\n\n    }\n\n  }\n\n  //When player releases the key down pressed, set Interval drop again\n  const keyUp = ({ keyCode }) => {\n\n    if(!gameOver){\n      if(keyCode === 40){\n        console.log('Interval On!');\n        setDropTime(1000);\n      }\n    }\n\n  }\n\n\n  //Function to go down the player (when we press the down key)\n  const dropPlayer = () => {\n\n    console.log('Interval Off!');\n\n    // Stop the Interval drop when pressed down\n    setDropTime(null);\n\n    drop();\n  }\n\n\n  //Callback function when we press the keys in the keyboard\n  const move = ({ keyCode }) => {\n\n    //Check that the game is not Over\n    if(!gameOver){\n      if(keyCode === 37){ //left key arrow on the keyboard\n        movePlayer(-1); //moving to the left\n      } else if (keyCode === 39 ){ //right key arrow on the keyboard\n        movePlayer(1); //moving to the right\n      } else if (keyCode === 40){ //down key arrow on the keyboard\n        dropPlayer(); //go down\n      } else if (keyCode === 38){ //up key arrow on the keyboard\n        playerRotate(stage, 1); // call rotate function to rotate tetromino\n      }\n    }\n  }\n\n\n //We use Interval function for the drop time of the Tetromino\n  useInterval(() => {\n\n    drop();\n\n  }, dropTime)\n\n\n\n  return(\n    //Wrap with our background Image, Callback function when a key is press on the screen\n    //If the game is over Display gameOver\n    //call the startGame function on click start button\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n\n      <StyledTetris>\n\n      <Stage stage={stage} />\n\n\n      <aside>\n\n        {gameOver ? (\n          <Display gameOver={gameOver} text=\"Game Over\" />\n        ) : (\n\n        <div>\n         <Display text=\"Score\" />\n         <Display text=\"Rows\" />\n         <Display text=\"Level\" />\n        </div>\n\n       )}\n\n        <StartButton callback={startGame}/>\n\n      </aside>\n\n      </StyledTetris>\n\n    </StyledTetrisWrapper>\n\n  )\n}\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}