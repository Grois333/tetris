{"ast":null,"code":"import _defineProperty from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  //Initial State of the Player\n  const _useState = useState({\n    //Setting the position of the Tetromino shape\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: randomTetromino().shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    //set the player state, with new values\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      //addimg values to the state\n      collided\n    }));\n  };\n\n  return [player];\n};","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/hooks/usePlayer.js"],"names":["useState","randomTetromino","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","updatePlayerPos","prev"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,eAAT,QAAgC,eAAhC;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAE7B;AAF6B,oBAGDF,QAAQ,CAAC;AAEnC;AACAG,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAH8B;AAInCC,IAAAA,SAAS,EAAEL,eAAe,GAAGM,KAJM;AAKnCC,IAAAA,QAAQ,EAAE;AALyB,GAAD,CAHP;AAAA;AAAA,QAGtBC,MAHsB;AAAA,QAGdC,SAHc;;AAY7B,QAAMC,eAAe,GAAG,CAAC;AAAEP,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAuB;AAE7C;AACAE,IAAAA,SAAS,CAACE,IAAI,sBACTA,IADS;AAEZT,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGQ,IAAI,CAACT,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGO,IAAI,CAACT,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFO;AAEwC;AACpDG,MAAAA;AAHY,MAAL,CAAT;AAKD,GARD;;AAUA,SAAO,CAACC,MAAD,CAAP;AACD,CAvBM","sourcesContent":["import { useState } from 'react';\n\nimport { randomTetromino } from '../tetrominos';\n\n\nexport const usePlayer = () => {\n\n  //Initial State of the Player\n  const [player, setPlayer] = useState({\n\n    //Setting the position of the Tetromino shape\n    pos: { x: 0, y: 0},\n    tetromino: randomTetromino().shape,\n    collided: false,\n\n  });\n\n  const updatePlayerPos = ({ x, y, collided}) => {\n\n    //set the player state, with new values\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)}, //addimg values to the state\n      collided,\n    }))\n  }\n\n  return [player];\n}\n"]},"metadata":{},"sourceType":"module"}