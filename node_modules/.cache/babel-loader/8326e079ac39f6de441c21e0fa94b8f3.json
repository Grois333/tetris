{"ast":null,"code":"import _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react'; //Import the Stage\n\nimport { createStage } from '../gameHelpers'; //Generate Clean Board\n\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      //First we flush the Stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); //Then draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        //loop to know the shape of the tetromino\n        row.forEach((value, x) => {\n          //if the tetromino has a shape, position the tetromino on the stage\n          if (value !== 0) {\n            //Coordinates on the Stage\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear') //check if the player is collided\n            ];\n          }\n        });\n      }); //Check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBAErBL,QAAQ,CAACE,WAAW,EAAZ,CAFa;AAAA;AAAA,QAExCI,KAFwC;AAAA,QAEjCC,QAFiC;;AAI/CN,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAE/B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAChCA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAH+B,CAO/B;;AACAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACnC;AACAJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB;AACA,cAAGD,KAAK,KAAI,CAAZ,EAAc;AACZ;AACAP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,YAE1Cb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA6B,OAFa,EAEJ;AAFI,aAA/C;AAID;AACF,SATD;AAUD,OAZD,EAR+B,CAsB/B;;AACA,UAAGhB,MAAM,CAACgB,QAAV,EAAoB;AAClBf,QAAAA,WAAW;AACZ;;AAED,aAAOK,QAAP;AAED,KA7BD;;AA+BAH,IAAAA,QAAQ,CAACc,IAAI,IAAIb,WAAW,CAACa,IAAD,CAApB,CAAR;AAED,GAnCQ,EAmCN,CAACjB,MAAD,EAASC,WAAT,CAnCM,CAAT;AAqCA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CA1CM","sourcesContent":["import { useState, useEffect } from 'react';\n\n//Import the Stage\nimport { createStage } from '../gameHelpers';\n\n//Generate Clean Board\nexport const useStage = (player, resetPlayer) => {\n\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n\n    const updateStage = prevStage => {\n\n      //First we flush the Stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      //Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        //loop to know the shape of the tetromino\n        row.forEach((value, x) => {\n          //if the tetromino has a shape, position the tetromino on the stage\n          if(value !==0){\n            //Coordinates on the Stage\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`//check if the player is collided\n            ];\n          }\n        });\n      });\n\n      //Check if we collided\n      if(player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n\n    };\n\n    setStage(prev => updateStage(prev));\n\n  }, [player, resetPlayer]);\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}