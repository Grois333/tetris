{"ast":null,"code":"import _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react'; //Import the Stage\n\nimport { createStage } from '../gameHelpers'; //Generate Clean Board\n\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1]; //To keep track of all the rows that are cleared\n\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsCleared = _useState4[0],\n        setrowsCleared = _useState4[1];\n\n  useEffect(() => {\n    //Rows to be cleared in the game, starts at 0\n    setrowsCleared(0); //We give our stage to check if the rows contain any [0]s\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      //check if a row contains a tetromino and no empty ([0])\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setrowsCleared(prev => prev + 1); //the row should be cleared, we empty the row\n\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      } //push the row into the accumulator array, if we dont have afull row\n\n\n      ack.push(row);\n      return ack;\n    }, []);\n\n    const updateStage = prevStage => {\n      //First we flush the Stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); //Then draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        //loop to know the shape of the tetromino\n        row.forEach((value, x) => {\n          //if the tetromino has a shape, position the tetromino on the stage\n          if (value !== 0) {\n            //Coordinates on the Stage\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear')];\n          }\n        });\n      }); //Check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setrowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBAErBL,QAAQ,CAACE,WAAW,EAAZ,CAFa;AAAA;AAAA,QAExCI,KAFwC;AAAA,QAEjCC,QAFiC,kBAI/C;;;AAJ+C,qBAKRP,QAAQ,CAAC,CAAD,CALA;AAAA;AAAA,QAKxCQ,WALwC;AAAA,QAK3BC,cAL2B;;AAO/CR,EAAAA,SAAS,CAAC,MAAM;AAEd;AACAQ,IAAAA,cAAc,CAAC,CAAD,CAAd,CAHc,CAKd;;AACA,UAAMC,SAAS,GAAGC,QAAQ,IACxBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAE5B;AACA,UAAGA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAA0C,CAAC,CAA9C,EAAgD;AAC9CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd,CAD8C,CAE9C;;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AACA,eAAOR,GAAP;AACD,OAR2B,CAS5B;;;AACAA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACD,KAZD,EAYG,EAZH,CADF;;AAeA,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAE/B;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAcX,GAAG,IAChCA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAH+B,CAO/B;;AACAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACnC;AACAd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB;AACA,cAAGD,KAAK,KAAI,CAAZ,EAAc;AACZ;AACAlB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,YAE1CzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAFa,EAA/C;AAID;AACF,SATD;AAUD,OAZD,EAR+B,CAsB/B;;AACA,UAAG5B,MAAM,CAAC4B,QAAV,EAAoB;AAClB3B,QAAAA,WAAW;AACX,eAAOK,SAAS,CAACC,QAAD,CAAhB;AACD;;AAED,aAAOA,QAAP;AAED,KA9BD;;AAgCAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR;AAED,GAvDQ,EAuDN,CAACb,MAAD,EAASC,WAAT,CAvDM,CAAT;AAyDA,SAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,CAAP;AACD,CAjEM","sourcesContent":["import { useState, useEffect } from 'react';\n\n//Import the Stage\nimport { createStage } from '../gameHelpers';\n\n//Generate Clean Board\nexport const useStage = (player, resetPlayer) => {\n\n  const [stage, setStage] = useState(createStage());\n\n  //To keep track of all the rows that are cleared\n  const [rowsCleared, setrowsCleared ] = useState(0);\n\n  useEffect(() => {\n\n    //Rows to be cleared in the game, starts at 0\n    setrowsCleared(0);\n\n    //We give our stage to check if the rows contain any [0]s\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n\n        //check if a row contains a tetromino and no empty ([0])\n        if(row.findIndex(cell => cell[0] === 0 ) === -1){\n          setrowsCleared(prev => prev + 1);\n          //the row should be cleared, we empty the row\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        //push the row into the accumulator array, if we dont have afull row\n        ack.push(row);\n        return ack;\n      }, [])\n\n    const updateStage = prevStage => {\n\n      //First we flush the Stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      //Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        //loop to know the shape of the tetromino\n        row.forEach((value, x) => {\n          //if the tetromino has a shape, position the tetromino on the stage\n          if(value !==0){\n            //Coordinates on the Stage\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`, //check if the player is collided\n            ];\n          }\n        });\n      });\n\n      //Check if we collided\n      if(player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n\n    };\n\n    setStage(prev => updateStage(prev));\n\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};\n"]},"metadata":{},"sourceType":"module"}