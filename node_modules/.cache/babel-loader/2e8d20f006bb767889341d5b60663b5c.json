{"ast":null,"code":"import _defineProperty from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/isaac/Documents/Developers Institute/Exercises/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  //Initial State of the Player\n  const _useState = useState({\n    //Setting the position of the Tetromino shape, grab the first TETROMINO created shape [0]\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1]; //Tetromino Rotation\n\n\n  const rotate = (matrix, dir) => {\n    // Make the rows to become columns (transpose)\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); // Reverse each row to get a rotated tetromino (matrix)\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  }; //Checking for collision detection when roteted tetromino\n\n\n  const playerRotate = (stage, dir) => {};\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    //set the player state, with new values\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      //addimg values to the state\n      collided\n    }));\n  }; //Reseting everything, player in stage, and tetromino random shape in stage\n\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Exercises/tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","updatePlayerPos","prev","resetPlayer"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAE7B;AAF6B,oBAGDL,QAAQ,CAAC;AAEnC;AACAM,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAH8B;AAInCC,IAAAA,SAAS,EAAEP,UAAU,CAAC,CAAD,CAAV,CAAcQ,KAJU;AAKnCC,IAAAA,QAAQ,EAAE;AALyB,GAAD,CAHP;AAAA;AAAA,QAGtBC,MAHsB;AAAA,QAGdC,SAHc,kBAa9B;;;AACC,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAE9B;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAC7BL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CADkB,CAArB,CAH8B,CAO7B;;AACA,QAAGJ,GAAG,GAAG,CAAT,EAAY,OAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAIA,GAAG,CAACC,OAAJ,EAAxB,CAAP;AACZ,WAAON,YAAY,CAACM,OAAb,EAAP;AACF,GAVD,CAd6B,CA0B7B;;;AACA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB,CAEpC,CAFD;;AAKA,QAAMU,eAAe,GAAG,CAAC;AAAEnB,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAuB;AAE7C;AACAE,IAAAA,SAAS,CAACc,IAAI,sBACTA,IADS;AAEZrB,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGoB,IAAI,CAACrB,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGmB,IAAI,CAACrB,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFO;AAEwC;AACpDG,MAAAA;AAHY,MAAL,CAAT;AAKD,GARD,CAhC6B,CA0C7B;;;AACA,QAAMiB,WAAW,GAAG3B,WAAW,CAAC,MAAM;AACpCY,IAAAA,SAAS,CAAC;AACRP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEH,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BI,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAEN,eAAe,GAAGO,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACC,MAAD,EAASc,eAAT,EAA0BE,WAA1B,CAAP;AACD,CApDM","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\n\nimport { STAGE_WIDTH } from '../gameHelpers';\n\n\nexport const usePlayer = () => {\n\n  //Initial State of the Player\n  const [player, setPlayer] = useState({\n\n    //Setting the position of the Tetromino shape, grab the first TETROMINO created shape [0]\n    pos: { x: 0, y: 0},\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n\n  });\n\n\n //Tetromino Rotation\n  const rotate = (matrix, dir) => {\n\n    // Make the rows to become columns (transpose)\n    const rotatedTetro = matrix.map((_, index) =>\n       matrix.map(col => col[index]),\n     );\n\n     // Reverse each row to get a rotated tetromino (matrix)\n     if(dir > 0) return rotatedTetro.map(row => row.reverse());\n     return rotatedTetro.reverse();\n  };\n\n  //Checking for collision detection when roteted tetromino\n  const playerRotate = (stage, dir) => {\n    \n  };\n\n\n  const updatePlayerPos = ({ x, y, collided}) => {\n\n    //set the player state, with new values\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)}, //addimg values to the state\n      collided,\n    }))\n  }\n\n  //Reseting everything, player in stage, and tetromino random shape in stage\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0},\n      tetromino: randomTetromino().shape,\n      collided: false,\n    })\n  }, [])\n\n  return [player, updatePlayerPos, resetPlayer];\n}\n"]},"metadata":{},"sourceType":"module"}